#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


require "strscan"

class FortranFormatScanner 
  
  def initialize (text)
    @s = StringScanner.new(text)
  end

  def yylex
    while @s.rest?
      case
      when @s.scan(/\A(ES|[FEDG])(\d+)\.(\d+)/i) ### {F|E|D|G|ES}w.d
        return [
          @s[1].upcase.to_sym, 
          [
            @s[2].to_i, 
            @s[3].to_i
          ]
        ]
      when @s.scan(/\AE(\d+)/i)               ### Ed (for exponential)
        return [
          :EXP,
          @s[1].to_i
        ]
      when @s.scan(/\AI(\d+)(\.(\d+))?/i)     ### Iw(.d)
        return [
          :I, 
          [
            @s[1].to_i, 
            @s[3] ? @s[3].to_i : nil
          ]
        ]
      when @s.scan(/\AL(\d+)?/i)              ### L(w)
        return [
          :L, 
          @s[1] ? @s[1].to_i : nil
        ]
      when @s.scan(/\AA(\d+)?/i)              ### A(w)
        return [
          :A, 
          @s[1] ? @s[1].to_i : nil
        ]
      when @s.scan(/\AX/i)                    ### X
        return [
          :X,
          nil
        ]
      when @s.scan(/\ATL(\d+)?/i)             ### TLw
        return [
          :TL,
          @s[1] ? @s[1].to_i : 1
        ]
      when @s.scan(/\ATR(\d+)?/i)             ### TRw
        return [
          :TR,
          @s[1] ? @s[1].to_i : 1
        ]
      when @s.scan(/\AT(\d+)?/i)              ### Tw
        return [
          :T,
          @s[1] ? @s[1].to_i : 1
        ]
      when @s.scan(/\A([+-]?\d+)P/i)          ### {+|-|}P
        return [
          :P,
          @s[1].to_i
        ]
      when @s.scan(/\AS[PS]?/i)               ### S,SP,SS
        return [
          :Sp,
          @s[0] =~ /SP/i ? true : false
        ]
      when @s.scan(/\AB[NZ]/i)                ### BN,BZ
        return [
          :B,
          @s[0] =~ /BZ/i ? true : false
        ]
      when @s.match?(/\A(\d+)?H/i)            ### Hollerith 
        count  = @s[1] ? @s[1].to_i : 1
        if @s.scan(/\A(\d+)?H(.{#{count}})/)
          return [
            :H,
            [count, @s[2]]
          ]
	      else
					raise "invalid horeris descriptor"
        end
      when @s.scan(/\A'((?:''|[^'])*)'/)      ### 'quoted string'
        return [
          :STRING, 
          @s[1].gsub(/''/, "'")
        ]
      when @s.scan(/\A"((?:""|[^"])*)"/)      ### 'double-quoted string'
        return [
          :STRING, 
          @s[1].gsub(/""/, '"')
        ]
      when @s.scan(/\A(\d+)/)                 ### digits
        return [
          :DIGITS, 
          @s[1].to_i
        ]
      when @s.scan(/\A([\(\)\/\$\:])/)        ### {(|)|/|$}
        return [
          @s[1], 
          nil
        ]
      when @s.scan(/:/)
	      raise("format descriptor ':' is not supported.")
      when @s.scan(/\A,/)                     ### blank
        next
      when @s.scan(/\A\s+/)                   ### blank
        next
      else
        raise "FortranFormat parse error\n\t#{@s.string}\n\t#{' '*@s.pos}^"
      end
    end
  end

end

class FortranFormatParser < Racc::Parser

module_eval(<<'...end fortran_format.y/module_eval...', 'fortran_format.y', 79)

  def parse (str)
    @scan  = FortranFormatScanner.new(str)
    @scale = 0
    @continue = false
    do_parse
  end

  def next_token
    return @scan.yylex
  end

...end fortran_format.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     8,    10,    13,    16,    19,    22,    25,    29,     3,
     5,    33,     7,     9,    12,    15,    18,    21,    24,    27,
     1,     4,     6,     8,    10,    13,    16,    19,    22,    25,
    29,     3,     5,    35,     7,     9,    12,    15,    18,    21,
    24,    27,     1,     4,     6,     8,    10,    13,    16,    19,
    22,    25,    29,     3,     5,    30,     7,     9,    12,    15,
    18,    21,    24,    27,     1,     4,     6,     8,    10,    13,
    16,    19,    22,    25,    29,     3,     5,    36,     7,     9,
    12,    15,    18,    21,    24,    27,     1,     4,     5,   nil,
     7,     9,    12,    15,    18,    21,    24,    27,     1,     4 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    11,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    31,    31,    31,    31,    31,    31,    31,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,    31,    31,    31,    14,    14,    14,    14,    14,    14,
    14,    14,    14,    14,    14,     2,    14,    14,    14,    14,
    14,    14,    14,    14,    14,    14,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,    33,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     6,   nil,
     6,     6,     6,     6,     6,     6,     6,     6,     6,     6 ]

racc_action_pointer = [
    -2,   nil,    31,   nil,   nil,    64,    76,   nil,   nil,   nil,
   nil,    11,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    20,   nil,    77,   nil,   nil,   nil ]

racc_action_default = [
   -31,   -28,   -19,   -16,   -29,   -31,   -31,   -20,    -8,   -21,
    -9,   -31,   -22,   -10,    -1,   -23,   -11,    -2,   -24,   -12,
    -4,   -25,   -13,    -5,   -26,   -14,    -6,   -27,   -18,   -15,
   -30,   -31,    -7,   -31,    -3,   -17,    37 ]

racc_goto_table = [
    34,    14,    11,    32,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34 ]

racc_goto_check = [
     3,     2,     1,     6,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     2,     1,   -14,   nil,   nil,    -3,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    17,    20,    23,    26,    28,     2 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 26, :_reduce_1,
  1, 27, :_reduce_2,
  2, 27, :_reduce_3,
  1, 28, :_reduce_4,
  1, 28, :_reduce_5,
  1, 28, :_reduce_6,
  2, 28, :_reduce_7,
  1, 29, :_reduce_8,
  1, 30, :_reduce_9,
  1, 30, :_reduce_10,
  1, 30, :_reduce_11,
  1, 30, :_reduce_12,
  1, 30, :_reduce_13,
  1, 30, :_reduce_14,
  1, 30, :_reduce_15,
  1, 30, :_reduce_16,
  3, 31, :_reduce_17,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_20,
  1, 32, :_reduce_21,
  1, 32, :_reduce_22,
  1, 32, :_reduce_23,
  1, 32, :_reduce_24,
  1, 32, :_reduce_25,
  1, 33, :_reduce_26,
  1, 33, :_reduce_27,
  1, 33, :_reduce_28,
  1, 33, :_reduce_29,
  2, 33, :_reduce_30 ]

racc_reduce_n = 31

racc_shift_n = 37

racc_token_table = {
  false => 0,
  :error => 1,
  :DIGITS => 2,
  :H => 3,
  :STRING => 4,
  :P => 5,
  :Sp => 6,
  :B => 7,
  :T => 8,
  :TR => 9,
  :TL => 10,
  "$" => 11,
  "(" => 12,
  ")" => 13,
  "/" => 14,
  :X => 15,
  :A => 16,
  :I => 17,
  :L => 18,
  :F => 19,
  :E => 20,
  :ES => 21,
  :D => 22,
  :G => 23,
  :EXP => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DIGITS",
  "H",
  "STRING",
  "P",
  "Sp",
  "B",
  "T",
  "TR",
  "TL",
  "\"$\"",
  "\"(\"",
  "\")\"",
  "\"/\"",
  "X",
  "A",
  "I",
  "L",
  "F",
  "E",
  "ES",
  "D",
  "G",
  "EXP",
  "$start",
  "format",
  "format_string",
  "format_spec",
  "hollerith",
  "unrepeatable",
  "repeatable",
  "fixed_point",
  "floating_point" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'fortran_format.y', 22)
  def _reduce_1(val, _values, result)
    	                                if val[0].size == 1 and val[0].first.is_a?(Group)
		                                result = val[0].first
		                              else
	                                  result = Group.new(1,val[0]) 
	                                end
	                              
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 30)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 32)
  def _reduce_3(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 35)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 36)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 37)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 39)
  def _reduce_7(val, _values, result)
     val[1].count = val[0]; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 41)
  def _reduce_8(val, _values, result)
     result = NodeH.new(*val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 44)
  def _reduce_9(val, _values, result)
     result = NodeS.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 45)
  def _reduce_10(val, _values, result)
     result = NodeP.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 46)
  def _reduce_11(val, _values, result)
     result = NodeSp.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 47)
  def _reduce_12(val, _values, result)
     result = NodeB.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 48)
  def _reduce_13(val, _values, result)
     result = NodeT.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 49)
  def _reduce_14(val, _values, result)
     result = NodeTR.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 50)
  def _reduce_15(val, _values, result)
     result = NodeTL.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 51)
  def _reduce_16(val, _values, result)
     result = Continue.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 55)
  def _reduce_17(val, _values, result)
     result = Group.new(1,val[1]) 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'fortran_format.y', 58)
  def _reduce_20(val, _values, result)
     result = Flush.new(1) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 61)
  def _reduce_21(val, _values, result)
     result = NodeX.new(1) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 62)
  def _reduce_22(val, _values, result)
     result = NodeA.new(1, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 63)
  def _reduce_23(val, _values, result)
     result = NodeI.new(1, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 64)
  def _reduce_24(val, _values, result)
     result = NodeL.new(1, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 65)
  def _reduce_25(val, _values, result)
     result = NodeF.new(1, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 68)
  def _reduce_26(val, _values, result)
     result = NodeE.new(1, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 69)
  def _reduce_27(val, _values, result)
     result = NodeES.new(1, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 70)
  def _reduce_28(val, _values, result)
     result = NodeE.new(1, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 71)
  def _reduce_29(val, _values, result)
     result = NodeG.new(1, *val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'fortran_format.y', 73)
  def _reduce_30(val, _values, result)
     result = val[0]; result.exp = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class FortranFormatParser


